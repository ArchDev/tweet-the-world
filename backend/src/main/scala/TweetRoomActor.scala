import TweetRoomActor._
import akka.actor.{Actor, ActorRef}
import pushka.annotation.pushka

/**
  * Just state handler and publisher for tweets.
  */
class TweetRoomActor extends Actor {

  var users: Map[UserId, ActorRef] = Map()
  var tweets: Seq[Tweet] = Seq(
    adminUUID -> defaultTweet
  )

  override def receive: Receive = {
    case Subscribe(userId, userActor) =>
      users = users + (userId -> userActor)
      userActor ! TweetPublishedEvent(tweets.head._2)
    case PublishTweet(userId, message) =>
      tweets = (userId -> message) +: tweets
      users.values.foreach(_ ! TweetPublishedEvent(message))
    case UnSubscribe(userId) =>
      users = users - userId
    case unhandledMessage =>
      println(s"Command cannot be handled: $unhandledMessage")
  }

}

/**
  * Accepted by TweetRoomActor commands.
  */
sealed trait TweetRoomCommand
case class Subscribe(userId: UserId, userActor: ActorRef) extends TweetRoomCommand
case class UnSubscribe(userId: String) extends TweetRoomCommand
case class PublishTweet(userId: String, message: String) extends TweetRoomCommand

/**
  * Generated by TweetRoomActor event.
  */
@pushka case class TweetPublishedEvent(message: String)

object TweetRoomActor {
  type UserId = String
  type Tweet = (UserId, String)

  val adminUUID = "00000000-0000-0000-0000-000000000000"
  val defaultTweet = "Confidence ebbs and flows - just because you have it one day does not mean you will have it forever."
}